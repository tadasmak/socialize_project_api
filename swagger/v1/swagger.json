{
  "openapi": "3.0.1",
  "info": {
    "title": "API V1",
    "version": "v1"
  },
  "servers": [
    {
      "url": "localhost:3000",
      "variables": {}
    }
  ],
  "paths": {
    "/api/v1/activities": {
      "get": {
        "summary": "List activities",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Activity"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - missing or invalid fields"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityCreate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/v1/activities/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Activity ID",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "Show activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "summary": "Update activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to execute this action"
          },
          "422": {
            "description": "Unprocessable Entity - participant or activity validation error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityUpdate"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "You are not authorized to execute this action"
          },
          "422": {
            "description": "Unprocessable Entity - could not delete activity"
          }
        }
      }
    },
    "/api/v1/activities/{id}/join": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Activity ID",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "post": {
        "summary": "Join activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "User joined the activity"
          },
          "409": {
            "description": "User already participates in this activity"
          },
          "422": {
            "description": "User could not join the activity due to validation errors"
          }
        }
      }
    },
    "/api/v1/activities/{id}/leave": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "Activity ID",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ],
      "delete": {
        "summary": "Leave activity",
        "tags": [
          "Activities"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User left the activity"
          },
          "409": {
            "description": "User cannot leave their own activity"
          },
          "422": {
            "description": "User is not a part of this activity"
          }
        }
      }
    },
    "/api/v1/current_user": {
      "get": {
        "summary": "Get currently logged in user data",
        "tags": [
          "Session"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "summary": "Update currently logged in user data",
        "tags": [
          "Session"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - missing or invalid fields"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "summary": "Delete currently logged in user data",
        "tags": [
          "Session"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/users": {
      "post": {
        "summary": "Create user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - missing or invalid fields"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/v1/users/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "User ID",
          "schema": {
            "type": "integer"
          }
        }
      ],
      "get": {
        "summary": "Show user",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer <JWT_TOKEN>\""
      }
    },
    "schemas": {
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Basketball Game"
          },
          "description": {
            "type": "string",
            "example": "A 5v5 basketball game for beginners"
          },
          "location": {
            "type": "string",
            "example": "Crypto.com arena, Los Angeles"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2028-03-24T14:15:22Z"
          },
          "max_participants": {
            "type": "integer",
            "example": 5
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "ActivityCreate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 8,
            "maxLength": 100,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "Soccer Game",
            "description": "Title must be 8-100 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "description": {
            "type": "string",
            "minLength": 40,
            "maxLength": 1000,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "A soccer game for beginners",
            "description": "Description must be 40-1000 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "location": {
            "type": "string",
            "minLength": 4,
            "maxLength": 100,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "Barcelona Stadium",
            "description": "Location must be 4-100 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2028-03-24T14:15:22Z",
            "description": "Start time of the activity (ISO 8601 format). Should be no further than 1 month in the future"
          },
          "max_participants": {
            "type": "integer",
            "example": 5,
            "minimum": 2,
            "maximum": 8,
            "description": "Number of maximum participants, must be between 2 and 8."
          },
          "user_id": {
            "type": "integer",
            "example": 4,
            "description": "Activity creator user's ID"
          }
        },
        "required": [
          "title",
          "description",
          "location",
          "start_time",
          "max_participants",
          "user_id"
        ]
      },
      "ActivityUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 8,
            "maxLength": 100,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "Soccer Game",
            "description": "Title must be 8-100 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "description": {
            "type": "string",
            "minLength": 40,
            "maxLength": 1000,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "A soccer game for beginners",
            "description": "Description must be 40-1000 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "location": {
            "type": "string",
            "minLength": 4,
            "maxLength": 100,
            "pattern": "^[^<>{}\\[\\]|\\^~]+$",
            "example": "Barcelona Stadium",
            "description": "Location must be 4-100 characters long and cannot contain special characters <>{}[]|\\^~"
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "example": "2028-03-24T14:15:22Z",
            "description": "Start time of the activity (ISO 8601 format). Should be no further than 1 month in the future"
          },
          "max_participants": {
            "type": "integer",
            "example": 5,
            "minimum": 2,
            "maximum": 8,
            "description": "Number of maximum participants, must be between 2 and 8."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 14
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "john_doe"
          },
          "personality": {
            "type": "integer",
            "example": 5
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "format": "email",
            "example": "new_username"
          },
          "personality": {
            "type": "integer",
            "minimum": 1,
            "maximum": 7,
            "example": 2
          }
        }
      }
    }
  }
}